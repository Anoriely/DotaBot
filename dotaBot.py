import requests
import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime, timezone
from dotenv import load_dotenv
import os
import json
import re


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ —Å–æ–±—ã—Ç–∏–π
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot_start_time = datetime.now(timezone.utc)

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
STEAM_API_KEY = os.getenv("STEAM_API_KEY")
USER_DATA_FILE = os.getenv("USER_DATA_FILE")

with open(USER_DATA_FILE, "r") as user_data_file:
    user_data = json.load(user_data_file)

USER_STEAM_IDS = user_data["user_mappings"]
BOSS_USER_ID = user_data["boss_user"]
SPECIAL_USER_IDS = user_data["special_users"]
STEAM_ID_TOEXTEND = user_data["steam_id_toextend"]
PING_LIST = user_data["ping_list"]

STEAM_ID_PATTERN = re.compile(r"^\d{17}$")

DOTA_APP_ID = 570

bot = Bot(token=API_TOKEN)
dp = Dispatcher()





# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ —Ñ—Ä—É–∫—Ç–æ–≤ –¥–ª—è —Å–ª–æ—Ç–∞
FRUITS = ['üçé', 'üçä', 'üçã', 'üçí', 'üçá', 'üçâ', 'üçì']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ—Ç–∞
def spin_slots(mode):
    if mode == 1:
        # –° –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        if random.random() < 0.8:
            fruit = random.choice(FRUITS)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ—Ä—É–∫—Ç
            row1 = random.choices(FRUITS, k=3)
            row2 = [fruit, fruit, fruit]
            row3 = random.choices(FRUITS, k=3)
        else:
            # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            row1 = random.choices(FRUITS, k=3)
            row2 = random.choices(FRUITS, k=3)
            row3 = random.choices(FRUITS, k=3)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        row1 = random.choices(FRUITS, k=3)
        row2 = random.choices(FRUITS, k=3)
        row3 = random.choices(FRUITS, k=3)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    slot_result = f"{row1[0]} | {row1[1]} | {row1[2]}\n" \
                  f"{row2[0]} | {row2[1]} | {row2[2]}\n" \
                  f"{row3[0]} | {row3[1]} | {row3[2]}"

    is_win = (
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            row1[0] == row1[1] == row1[2] or  # –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è
            row2[0] == row2[1] == row2[2] or  # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
            row3[0] == row3[1] == row3[2] or  # –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            row1[0] == row2[1] == row3[2] or  # –ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
            row1[2] == row2[1] == row3[0]     # –û–±—Ä–∞—Ç–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
        )    


    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤—ã–∏–≥—Ä—ã—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏)
    if is_win:
        win_message = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
    else:
        win_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"

    return slot_result, win_message



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /slot
@dp.message(Command(commands=['slot']))
async def slot_machine(message: types.Message):

    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞

    if message.from_user.id in SPECIAL_USER_IDS:      
        result, win_message = spin_slots(1)
    else:
        result, win_message = spin_slots(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(f"üé∞ –¢—É—Ä–∏–∫-—Å–ª–æ—Ç—ã üé∞\n\n{result}\n\n{win_message}")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É.")

@dp.message(Command(commands=['howgay']))
async def how_cool(message: types.Message):
    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    
    if message.from_user.id == BOSS_USER_ID:
          gay_percentage = 0
    else:
          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 50% –¥–æ 100% –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          gay_percentage = random.randint(50, 100)    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = f"–¢—ã –≥–µ–π –Ω–∞ {gay_percentage}% üåà"
    await message.reply(response)

@dp.message(Command(commands=['info']))
async def info(message: types.Message):
    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    
    response = f"–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é? ü§ñ\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç—É—Ç - https://github.com/Anoriely/DotaBot"
    await message.reply(response)

@dp.message(Command(commands=['pingdota']))
async def ping_users(message: types.Message):
    if message.chat.type == "private":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.")
        return 
    
    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    
    mention_text = "–≠–π, –¢—É–∑—ã, –≤—Ä–µ–º—è –∂–µ—Å—Ç–∫–æ –ø–æ–¥–æ–ª–±–∏—Ç—å—Å—è –≤ –¥–æ—Ç–µ üåà:\n"
    for user in PING_LIST:
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID –∏ –∏–º–µ–Ω–∏
        mention_text += f"[{user['first_name']}](tg://user?id={user['id']})\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    await message.reply(mention_text, parse_mode="Markdown")






@dp.message(Command(commands=['regsteam']))
async def register_steam_id(message: types.Message):
    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    user_telegram_id = str(message.from_user.id)

    try:
        steam_id = message.text.split()[1]  
    except IndexError:
        await message.reply("–•–æ—á–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–∏—Ç —Ç–≤–æ–π —Ç—É–∑? –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π steamID64 –∫ Telegram.\nSteamID64 –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è —Å–∞–π—Ç https://steamid.io/, —É–∫–∞–∑–∞–≤ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /regsteam.\n–ü—Ä–∏–º–µ—Ä: /regsteam 76561198197419761")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π Steam ID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É 17 —Ü–∏—Ñ—Ä
    if not STEAM_ID_PATTERN.match(steam_id):
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Steam ID. Steam ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 17 —Ü–∏—Ñ—Ä.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π Steam ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for tg_id, existing_steam_id in USER_STEAM_IDS.items():
        if existing_steam_id == steam_id:
            await message.reply(f"–≠—Ç–æ—Ç Steam ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å Telegram ID: {tg_id}.\n–ù–µ –∂—É–ª—å–Ω–∏—á–∞–π!")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Steam ID
    if user_telegram_id in USER_STEAM_IDS:
        await message.reply(f"–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Steam ID: {USER_STEAM_IDS[user_telegram_id]}.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π steamID, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return

    # –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤–æ–≥–æ Steam ID –∫ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STEAM_IDS[user_telegram_id] = steam_id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª–µ
    user_data["user_mappings"] = USER_STEAM_IDS
    with open(USER_DATA_FILE, "w", encoding='utf-8') as user_data_file:
        json.dump(user_data, user_data_file, ensure_ascii=False, indent=4)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ
    await message.reply(f"–¢–≤–æ–π Steam ID: {steam_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–≤–æ–µ–º—É Telegram ID: {user_telegram_id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ Dota 2 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ Steam ID
def get_dota2_playtime(steam_id) -> int:
    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–≥—Ä–µ Dota 2
    url = f"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key={STEAM_API_KEY}&format=json&input_json={{\"steamid\":{steam_id},\"appids_filter\":[{DOTA_APP_ID}],\"include_played_free_games\":true}}"

    try:
        response = requests.get(url)
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö –∏ —á—Ç–æ –≤ –Ω–µ–º –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        if "response" in data and "games" in data["response"] and isinstance(data["response"]["games"], list) and len(data["response"]["games"]) > 0:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∏–≥—Ä—É ‚Äî Dota 2
            dota2_game = data["response"]["games"][0]
                    
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ Dota 2 –≤ –º–∏–Ω—É—Ç–∞—Ö
            dota2_playtime_minutes = dota2_game.get('playtime_forever', 0)

                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
            dota2_playtime_hours = dota2_playtime_minutes // 60

            if steam_id == STEAM_ID_TOEXTEND:  
                dota2_playtime_hours += 1555  

            return dota2_playtime_hours

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SteamID {steam_id}: {e}")
        return 0

@dp.message(Command(commands=['time_dota']))
async def get_dota2_playtime_handler(message: types.Message):
    
    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞

    user_telegram_id = str(message.from_user.id)

    if user_telegram_id not in USER_STEAM_IDS:
        await message.reply("–¢–≤–æ–π Telegram ID –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫–∞–∫–∏–º-–ª–∏–±–æ SteamID –≤ –±–∞–∑–µ.\n –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞ /regsteam!")
        return

    # –ü–æ–ª—É—á–∞–µ–º Steam ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    steam_id = USER_STEAM_IDS[user_telegram_id]

    dota2_playtime_hours = get_dota2_playtime(steam_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–≥—Ä–∞–ª –≤ Dota 2 –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç
    if dota2_playtime_hours == 0:
        await message.reply("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ Dota 2, –∏–ª–∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç.")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –∏–≥—Ä–µ
        await message.reply(f"–¢–≤–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ Dota 2: {dota2_playtime_hours} —á–∞—Å–æ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
@dp.message(Command(commands=['top_dota']))
async def show_top_dota2_playtime(message: types.Message):
    if message.chat.type == "private":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.")
        return 

    if message.date < bot_start_time:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    
    playtime_list = []

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ USER_STEAM_IDS
    for telegram_id, steam_id in USER_STEAM_IDS.items():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ Dota 2, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Steam ID
        playtime_hours = get_dota2_playtime(steam_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
        playtime_list.append((telegram_id, playtime_hours))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–∞—Å–æ–≤ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
    playtime_list.sort(key=lambda x: x[1], reverse=True)
    total_participants = 0
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    result_message = "üåà –¢–æ–ø <b>–ø—Ä–æ–±–∏—Ç—ã—Ö —Ç—É–∑–æ–≤</b> –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ Dota 2:\n\n"
    for index, (telegram_id, hours) in enumerate(playtime_list, start=1):
        try:
            member = await bot.get_chat_member(message.chat.id, telegram_id)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if member.user.username:
                user_tag = f"{member.user.username}"
            else:
                user_tag = f"{member.user.full_name}"  # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID

        except exceptions.TelegramBadRequest as e:
            if "PARTICIPANT_ID_INVALID" in str(e):
                user_tag = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({telegram_id}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
            else:
                user_tag = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({telegram_id})"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message += f"<b>{index}</b>. {user_tag} ‚Äî {hours} —á–∞—Å–æ–≤\n"
        total_participants += 1
   

    result_message += f"\n–í—Å–µ–≥–æ –ø—Ä–æ–±–∏—Ç—ã—Ö —Ç—É–∑–æ–≤ ‚Äî {total_participants}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await message.reply(result_message, parse_mode="HTML")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await bot.set_my_commands([
        types.BotCommand(command="/slot", description="–ü–æ–∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã üé∞"),
        types.BotCommand(command="/howgay", description="–£–∑–Ω–∞–π –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≥–µ–π üåà"),
        types.BotCommand(command="/pingdota", description="–ü–æ–∑–æ–≤–∏ –¢—É–∑–µ–≤–∏—á–µ–π –≤ –î–æ—Ç—É! üåà"),
       # types.BotCommand(command="/members", description="dev tool"),
        types.BotCommand(command="/time_dota", description="–£–∑–Ω–∞–π —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —É —Ç–µ–±—è –≤ –¥–æ—Ç–µ!"),
        types.BotCommand(command="/top_dota", description="–¢–æ–ø –ø—Ä–æ–±–∏—Ç—ã—Ö —Ç—É–∑–æ–≤!"),
        types.BotCommand(command="/regsteam", description="–ü–æ–∫–∞–∂–∏ –≤—Å–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ–±–∏—Ç!"),
        types.BotCommand(command="/info", description="–í—Å–µ –æ–±–æ –º–Ω–µ")
    ])

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
